{"version":3,"file":"static/js/220.679d7139.chunk.js","mappings":"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","sources":["pages/Three/components/TestScene.ts","pages/Three/index.tsx"],"sourcesContent":["\nimport * as THREE from 'three';\n\ninterface IProps {\n  el: HTMLCanvasElement | null\n}\n\n/**\n * Threejs学习Demo\n*/\nexport default class TestScene {\n  el: HTMLCanvasElement | null = null\n\n  renderer: THREE.WebGLRenderer | null = null\n\n  scene?: THREE.Scene\n\n  camera?: THREE.PerspectiveCamera\n\n  cube?: THREE.Mesh\n\n  particleGeometry?: THREE.BufferGeometry\n\n  constructor(params: IProps) {\n    Object.assign(this, params)\n\n    this.init()\n  }\n\n  init() {\n    if (!this.el) return\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 2000);\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      canvas: this.el\n    });\n    window.addEventListener('resize', () => {\n      var width = window.innerWidth;\n      var height = window.innerHeight;\n      if (this.renderer && this.camera) {\n        this.renderer.setSize(width, height);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n\n    this.drawParticle();\n    // this.animateParticle();\n  }\n\n  drawBox() {\n    if (!this.scene || !this.camera) {\n      return;\n    }\n\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n  }\n\n  drawParticle() {\n    if (!this.scene || !this.camera) {\n      return;\n    }\n\n    this.particleGeometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(1024 * 3);\n    const colors = new Float32Array(1024 * 3);\n\n    for (let i = 0, j = 0, l = positions.length; i < l; i += 3, j++) {\n      positions[i] = (j - 512) * 1.1;\n      positions[i + 1] = 0;\n      positions[i + 2] = 0;\n\n      colors[i] = 1;\n      colors[i + 1] = 1;\n      colors[i + 2] = 1;\n    }\n\n    this.particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    this.particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    const material = new THREE.PointsMaterial({ vertexColors: true });\n    const particles = new THREE.Points(this.particleGeometry, material);\n    this.scene?.add(particles);\n\n    this.camera.position.z = 100;\n  }\n\n  animateBox() {\n    if (!this.scene || !this.camera) {\n      return;\n    }\n\n    this.renderer?.setAnimationLoop(() => {\n      this.animateBox()\n    });\n\n    if (this.cube) {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n    }\n    this.renderer?.render(this.scene, this.camera);\n\n  }\n\n  animateParticle() {\n    if (!this.scene || !this.camera || !this.particleGeometry) {\n      return;\n    }\n\n    this.renderer?.setAnimationLoop(() => {\n      this.animateParticle()\n    });\n\n    const positions = this.particleGeometry.attributes.position.array;\n    // const colors = this.particleGeometry.attributes.color.array;\n    for (let i = 0; i < 1024; i++) {\n      // 每个粒子的索引\n      const index = i * 3;\n\n      // 更新每个粒子的位置\n      positions[index + 1] += Math.random() - 0.5; // 更新 y 坐标\n\n      // colors[index ] = Math.random();\n      // colors[index + 1] = Math.random();\n      // colors[index + 2] = Math.random();\n      // this.particleMaterial?.color.setRGB(1, Math.random(), 1);\n    }\n\n    this.particleGeometry.attributes.position.needsUpdate = true; // 标记顶点位置属性已更新\n    // this.particleGeometry.attributes.color.needsUpdate = true; // 标记顶点位置属性已更新\n\n\n    // particles.geometry.verticesNeedUpdate = true;\n    this.camera.lookAt(this.scene.position);\n\n    this.renderer?.render(this.scene, this.camera);\n\n  }\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport TestScene from \"./components/TestScene\";\n\n\nconst Page = (props: any) => {\n  const elRef = useRef<HTMLCanvasElement>(null);\n \n  useEffect(() => {\n    const canvas = elRef.current;\n    if (canvas) {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      \n      new TestScene({\n        el: canvas\n      });\n    }\n  }, []);\n\n  return (\n    <div>\n      <canvas ref={elRef} id=\"canvas\"  />\n    </div>\n  )\n};\n\nexport default Page;\n"],"names":["TestScene","constructor","params","el","renderer","scene","camera","cube","particleGeometry","Object","assign","this","init","THREE","window","innerWidth","innerHeight","antialias","canvas","addEventListener","width","height","setSize","aspect","updateProjectionMatrix","drawParticle","drawBox","geometry","material","color","add","position","z","_this$scene","positions","Float32Array","colors","i","j","l","length","setAttribute","vertexColors","particles","animateBox","_this$renderer","_this$renderer2","setAnimationLoop","rotation","x","y","render","animateParticle","_this$renderer3","_this$renderer4","attributes","array","Math","random","needsUpdate","lookAt","props","elRef","useRef","useEffect","current","_jsx","children","ref","id"],"sourceRoot":""}