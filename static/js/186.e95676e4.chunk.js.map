{"version":3,"file":"static/js/186.e95676e4.chunk.js","mappings":"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","sources":["utils/WebglUtils.ts","pages/ShaderText/Shader.ts","pages/ShaderText/index.tsx"],"sourcesContent":["\nexport default class WebglUtils {\n\n  static compileShader(gl: WebGLRenderingContext, shaderSource: string, shaderType: number) {\n    // Create the shader object\n    var shader = gl.createShader(shaderType);\n    if (!shader) {\n      // Something went wrong during compilation; get the error\n      throw \"could not create shader\";\n    }\n  \n    // Set the shader source code.\n    gl.shaderSource(shader, shaderSource);\n  \n    // Compile the shader\n    gl.compileShader(shader);\n  \n    // Check if it compiled\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n      // Something went wrong during compilation; get the error\n      throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n    }\n  \n    return shader;\n  }\n\n  static createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    // create a program.\n    var program = gl.createProgram();\n    if (!program) {\n      // Something went wrong during compilation; get the error\n      throw \"could not create program\";\n    }\n    // attach the shaders.\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n  \n    // link the program.\n    gl.linkProgram(program);\n  \n    // Check if it linked.\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!success) {\n      // something went wrong with the link\n      throw (\"program failed to link:\" + gl.getProgramInfoLog(program));\n    }\n  \n    return program;\n  }\n\n  static createProgramWithSources(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\n    const vertexShader = this.compileShader(gl, vsSource, gl.VERTEX_SHADER );\n    const fragmentShader = this.compileShader(gl, fsSource, gl.FRAGMENT_SHADER );\n    return this.createProgram(gl, vertexShader, fragmentShader)\n  }\n\n  static resizeCanvasToDisplaySize(canvas: HTMLCanvasElement, multiplier?: number) {\n    multiplier = multiplier || 1;\n    const width  = canvas.clientWidth  * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width ||  canvas.height !== height) {\n      canvas.width  = width;\n      canvas.height = height;\n      return true;\n    }\n    return false;\n  }\n\n}","import WebglUtils from \"../../utils/WebglUtils\"\n\n\n\n\n/* Parameters */\nlet vertexCount = 10000 * 4\nlet fontName = 'Arial, Helvetica'\nlet fontSize = 24\n\nlet vertexShaderSource = `\n  attribute vec4 a_position;\n  uniform vec2 u_resolution;\n  uniform float u_frame;\n  varying vec4 v_position;\n  varying float v_frame;\n  void main () {\n    v_position = a_position;\n    v_frame = u_frame;\n    v_position.xy /= u_resolution;\n    v_position.y *= -1.0;\n    \n    v_position.xy *= 10.0;\n    v_position.z += cos(u_frame / 20.0 + v_position.x * 10.0) * sin(u_frame / 10.0 + v_position.y * 12.0) * 0.02;\n    v_position.xy /= (1.0 + v_position.z);\n    \n    gl_Position = vec4(v_position.xy, 0.0, 1.0);\n    gl_PointSize = 3.0;\n  }\n`\n\nlet fragmentShaderSource = `\n  precision mediump float;\n  varying vec4 v_position;\n  varying float v_frame;\n  float pi = 3.141592653589793;\n  float hue2rgb(float f1, float f2, float hue) {\n      if (hue < 0.0)\n          hue += 1.0;\n      else if (hue > 1.0)\n          hue -= 1.0;\n      float res;\n      if ((6.0 * hue) < 1.0)\n          res = f1 + (f2 - f1) * 6.0 * hue;\n      else if ((2.0 * hue) < 1.0)\n          res = f2;\n      else if ((3.0 * hue) < 2.0)\n          res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n      else\n          res = f1;\n      return res;\n  }\n\n  vec3 hsl2rgb(vec3 hsl) {\n      vec3 rgb;\n      \n      hsl.x = mod(hsl.x, 360.0);\n      hsl.x /= 360.0;\n\n      if (hsl.y == 0.0) {\n          rgb = vec3(hsl.z); // Luminance\n      } else {\n          float f2;\n\n          if (hsl.z < 0.5)\n              f2 = hsl.z * (1.0 + hsl.y);\n          else\n              f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n\n          float f1 = 2.0 * hsl.z - f2;\n\n          rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n          rgb.g = hue2rgb(f1, f2, hsl.x);\n          rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n      }   \n      return rgb;\n  }\n  \n  void main () {\n    vec4 col = vec4(hsl2rgb(vec3(v_frame + v_position.z * 2000.0, 1.0, .5)) * v_position.w, 1.0);\n    gl_FragColor = col;\n  }\n`\n\nexport default class Shader {\n  private el: HTMLCanvasElement\n  private vertices: number[] = []\n  private dVertices: number[] = []\n  private refctx: CanvasRenderingContext2D|null\n  private gl: WebGLRenderingContext\n  private postctx: CanvasRenderingContext2D|null\n  private canvas: HTMLCanvasElement | OffscreenCanvas\n\n  private uResolution: WebGLUniformLocation|null\n  private uFrame: WebGLUniformLocation|null\n  private aPosition: number\n\n  private smoothness = 6\n\n  private textList = [\n    'Hey!',\n    'I\\'m H2x',\n    'How are you?',\n    'Do you like it?',\n    '~~~LanRen~~~',\n    ':3'\n  ]\n\n  private textIndex = 5\n\n  private frame = 0\n\n  private timer = 0\n\n  constructor(el: HTMLCanvasElement) {\n    this.el = el\n    this.refctx = document.createElement('canvas').getContext('2d')\n    this.gl = document.createElement('canvas').getContext('webgl') as WebGLRenderingContext\n    this.postctx = this.el.getContext('2d') \n    this.canvas = this.gl.canvas\n\n    this.textGeneration()\n    this.dVertices = new Array(vertexCount).fill(0)\n\n    let program = WebglUtils.createProgramWithSources(this.gl, vertexShaderSource, fragmentShaderSource)\n\n    this.aPosition = this.gl.getAttribLocation(program, 'a_position')\n    this.uResolution = this.gl.getUniformLocation(program, 'u_resolution')\n    this.uFrame = this.gl.getUniformLocation(program, 'u_frame') \n\n    let vertexBuffer = this.gl.createBuffer()\n\n    this.gl.useProgram(program)\n    this.gl.clearColor(0, 0, 0, 1)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT)\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertexBuffer)\n\n    this.gl.vertexAttribPointer(this.gl.getAttribLocation(program, 'a_position'), 4, this.gl.FLOAT, false, 0, 0)\n    this.gl.enableVertexAttribArray(this.aPosition)\n  }\n\n  public render() {\n    if(!this.postctx){\n      return;\n    }\n\n    this.frame++\n    this.gl.uniform1f(this.uFrame, this.frame)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT)\n\n    // Resizing\n    if (this.postctx.canvas.width !== this.postctx.canvas.offsetWidth || this.postctx.canvas.height !== this.postctx.canvas.offsetHeight) {\n      this.canvas.width = this.postctx.canvas.width = this.postctx.canvas.offsetWidth\n      this.canvas.height = this.postctx.canvas.height = this.postctx.canvas.offsetHeight\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height)\n      this.gl.uniform2fv(this.uResolution, [this.canvas.width, this.canvas.height])\n    }\n\n    for (let i = 0; i < this.vertices.length; i += 4) {\n      let x = i\n      let y = i + 1\n      let z = i + 2\n      let v = i + 3\n\n      // Make vertex transition to target vertex\n      this.dVertices[x] -= (this.dVertices[x] - this.vertices[x]) / this.smoothness // x\n      this.dVertices[y] -= (this.dVertices[y] - this.vertices[y]) / this.smoothness // y\n      //this.dVertices[z] -= (this.dVertices[z] - this.vertices[z]) / this.smoothness // z\n      this.dVertices[v] -= (this.dVertices[v] - this.vertices[v]) / this.smoothness // alpha\n    }\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.dVertices), this.gl.STATIC_DRAW)\n    this.gl.drawArrays(this.gl.POINTS, 0, this.dVertices.length / 4)\n\n    this.postctx.globalAlpha = 0.1\n    this.postctx.globalCompositeOperation = 'source-over'\n    this.postctx.drawImage(this.canvas, 0, 0)\n    this.postctx.globalCompositeOperation = 'lighten'\n    this.postctx.globalAlpha = 1\n    this.postctx.filter = 'blur(8px)'\n    this.postctx.drawImage(this.canvas, 0, 0)\n    this.postctx.filter = 'blur(0)'\n\n    this.timer = requestAnimationFrame(() => this.render())\n  }\n\n  public stop () {\n    cancelAnimationFrame( this.timer )\n  }\n\n  private setText(text: string) {\n    if(!this.refctx){\n      return;\n    }\n    // Drawing text and resizing canvas\n    this.refctx.font = `${fontSize}px ${fontName}`\n    this.refctx.canvas.width = this.refctx.measureText(text).width || 100\n    this.refctx.canvas.height = fontSize\n    this.refctx.font = `${fontSize}px ${fontName}`\n    this.refctx.textBaseline = 'top'\n    this.refctx.clearRect(0, 0, this.refctx.canvas.width, this.refctx.canvas.height)\n    this.refctx.fillStyle = '#fff'\n    this.refctx.fillText(text, 0, 0)\n\n    let { data } = this.refctx.getImageData(0, 0, this.refctx.canvas.width, this.refctx.canvas.height)\n\n    this.vertices = new Array(vertexCount).fill(0)\n    // 坐标 x: [ -width/2, width/2 ], y: [ -height/2, height/2 ]\n    for (let i = 0; i < data.length; i += 4) {\n      let x = (i / 4 % this.refctx.canvas.width) - this.refctx.canvas.width / 2\n      let y = ((i / 4 / this.refctx.canvas.width >> 0) % this.refctx.canvas.height) - this.refctx.canvas.height / 2\n      // let z = 0\n      // 红色通道为0则结果为0， 红色通道为255则结果为data[i + 3]\n      let v = data[i] ? (data[i + 3] / 255) : 0\n\n      this.vertices[i] = x\n      this.vertices[i + 1] = y\n      // this.vertices[vertexIndex++] = z\n      this.vertices[i + 3] = v\n    }\n  }\n\n  private textGeneration() {\n    this.setText(this.textList[this.textIndex])\n    setTimeout(() => {\n      this.textIndex++\n      if (this.textIndex === this.textList.length) {\n        this.textIndex = 0\n      }\n      this.textGeneration()\n    }, 1000)\n  }\n\n}\n","import React, { useEffect, useRef, useState } from \"react\"\n// import Shader from '../../components/Shaders/Shader1';\n// import Shader from '../../components/Shaders/Canvas2d';\n// import Shader from '../../scene/Pixel/Pixel';\nimport Shader from \"./Shader\"\n\n/**\n * Text Animation with Shader\n */\nconst Page = (props: any) => {\n  const elRef = useRef<HTMLCanvasElement>(null);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const shaderRef = useRef<any>(null);\n  useEffect(() => {\n    const canvas = elRef.current;\n    if (canvas) {\n      // canvas.width = window.innerWidth;\n      // canvas.height = window.innerHeight;\n\n      setTimeout(() => {\n        let shader = new Shader(canvas);\n        shaderRef.current = shader;\n        shader.render();\n      }, 1000)\n    }\n  }, []);\n\n  const togglePlay = (isPlaying: boolean) => {\n    if (isPlaying) {\n      shaderRef.current.stop();\n    } else {\n      shaderRef.current.render();\n    }\n    setIsPlaying(!isPlaying);\n  }\n\n\n  return (\n    <div>\n      <canvas ref={elRef} id=\"canvas\" onClick={() => togglePlay(isPlaying)}/>\n    </div>\n  )\n};\n\nexport default Page;\n"],"names":["WebglUtils","compileShader","gl","shaderSource","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","createProgramWithSources","vsSource","fsSource","this","VERTEX_SHADER","FRAGMENT_SHADER","resizeCanvasToDisplaySize","canvas","multiplier","width","clientWidth","height","clientHeight","fontName","Shader","constructor","el","vertices","dVertices","refctx","postctx","uResolution","uFrame","aPosition","smoothness","textList","textIndex","frame","timer","document","createElement","getContext","textGeneration","Array","fill","getAttribLocation","getUniformLocation","vertexBuffer","createBuffer","useProgram","clearColor","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","render","uniform1f","offsetWidth","offsetHeight","viewport","uniform2fv","i","length","x","y","v","bufferData","Float32Array","STATIC_DRAW","drawArrays","POINTS","globalAlpha","globalCompositeOperation","drawImage","filter","requestAnimationFrame","stop","cancelAnimationFrame","setText","text","font","concat","measureText","textBaseline","clearRect","fillStyle","fillText","data","getImageData","setTimeout","props","elRef","useRef","isPlaying","setIsPlaying","useState","shaderRef","useEffect","current","_jsx","children","ref","id","onClick","togglePlay"],"sourceRoot":""}